<?php declare(strict_types = 1);

namespace JtcSolutions\CodeGenerator\Service\Provider;

use Exception;
use JtcSolutions\Helpers\Helper\FQCNHelper;

/**
 * Provides context and shared configuration needed during code generation.
 * Holds templates for namespaces/paths, project settings, and dynamically set values
 * like the FQCN of a generated DTO needed by a controller generator.
 */
class ContextProvider
{
    /**
     * @param string $controllerNamespaceTemplate Template for controller namespaces (e.g., 'App\UI\{domain}\{entity}Controller').
     * @param string $dtoNamespaceTemplate Template for DTO namespaces (e.g., 'App\Application\Dto\{domain}\{entity}').
     * @param string $projectDir The root directory of the source code (e.g., '%kernel.project_dir%/src').
     * @param string $projectBaseNamespace The base namespace corresponding to the project directory (e.g., 'App').
     * @param class-string $errorResponseClass FQCN of the standard error response DTO.
     * @param class-string $paginationClass FQCN of the standard pagination metadata DTO.
     * @param class-string[] $extendedClasses Optional array of FQCNs for base classes controllers should extend.
     * @param class-string[] $dtoInterfaces Optional array of FQCNs for interfaces DTOs should implement.
     * @param class-string|null $dtoFullyQualifiedClassName Holds the FQCN of a DTO generated by DtoGenerator, to be used by controller generators (e.g., Create/Update). Set dynamically during generation.
     */
    public function __construct(
        private readonly string $controllerNamespaceTemplate,
        private readonly string $dtoNamespaceTemplate,
        public readonly string $projectDir,
        public readonly string $projectBaseNamespace,
        public readonly string $errorResponseClass,
        public string $paginationClass,
        // Manually set settings or dynamically updated during generation
        public array $extendedClasses = [],
        public array $dtoInterfaces = [],
        public ?string $dtoFullyQualifiedClassName = null,
    ) {
    }

    /**
     * Calculates the absolute filesystem path for a DTO based on the entity FQCN and configured templates.
     *
     * @param class-string $classFullyQualifiedClassName The FQCN of the related entity.
     * @return string The absolute path to the directory where the DTO should be placed.
     * @throws Exception If namespace/path conversion or variable replacement fails.
     */
    public function getDtoPath(string $classFullyQualifiedClassName): string
    {
        return FQCNHelper::convertNamespaceToFilepath(
            $this->replaceVariables($this->dtoNamespaceTemplate, $classFullyQualifiedClassName),
            $this->projectBaseNamespace,
            $this->projectDir,
        );
    }

    /**
     * Calculates the absolute filesystem path for a Controller based on the entity FQCN and configured templates.
     *
     * @param class-string $classFullyQualifiedClassName The FQCN of the related entity.
     * @return string The absolute path to the directory where the Controller should be placed.
     * @throws Exception If namespace/path conversion or variable replacement fails.
     */
    public function getControllerPath(string $classFullyQualifiedClassName): string
    {
        return FQCNHelper::convertNamespaceToFilepath(
            $this->replaceVariables($this->controllerNamespaceTemplate, $classFullyQualifiedClassName),
            $this->projectBaseNamespace,
            $this->projectDir,
        );
    }

    /**
     * Calculates the target namespace for a DTO based on the entity FQCN and configured template.
     *
     * @param class-string $classFullyQualifiedClassName The FQCN of the related entity.
     * @return string The calculated DTO namespace.
     * @throws Exception If variable replacement fails.
     */
    public function getDtoNamespace(string $classFullyQualifiedClassName): string
    {
        return $this->replaceVariables($this->dtoNamespaceTemplate, $classFullyQualifiedClassName);
    }

    /**
     * Calculates the target namespace for a Controller based on the entity FQCN and configured template.
     *
     * @param class-string $classFullyQualifiedClassName The FQCN of the related entity.
     * @return string The calculated Controller namespace.
     * @throws Exception If variable replacement fails.
     */
    public function getControllerNamespace(string $classFullyQualifiedClassName): string
    {
        return $this->replaceVariables($this->controllerNamespaceTemplate, $classFullyQualifiedClassName);
    }

    /**
     * Gets the configured list of base classes for controllers.
     *
     * @return class-string[]
     */
    public function getExtendedClasses(): array
    {
        return $this->extendedClasses;
    }

    /**
     * Gets the configured FQCN for the standard error response DTO.
     *
     * @return class-string
     */
    public function getErrorResponseClass(): string
    {
        return $this->errorResponseClass;
    }

    /**
     * Gets the configured FQCN for the standard pagination metadata DTO.
     *
     * @return class-string
     */
    public function getPaginationClass(): string
    {
        return $this->paginationClass;
    }

    /**
     * Replaces {domain} and {entity} placeholders in a template string.
     * Extracts domain and entity from the provided FQCN.
     * Ensures backslashes are used for the final namespace.
     *
     * @param string $template The template string containing placeholders.
     * @param class-string $classFullyQualifiedClassName The FQCN to extract domain/entity from.
     * @return string The template with placeholders replaced.
     * @throws Exception If domain or entity cannot be extracted from the FQCN.
     */
    private function replaceVariables(string $template, string $classFullyQualifiedClassName): string
    {
        ['domain' => $domain, 'entity' => $entity] = FQCNHelper::extractDomainAndEntity($classFullyQualifiedClassName);

        if ($domain === null || $entity === null) {
            throw new Exception('Domain or Entity was detected as null, which is not supported!');
        }

        $namespace = str_replace('{domain}', $domain, $template);
        return str_replace('{entity}', $entity, $namespace);
    }
}
